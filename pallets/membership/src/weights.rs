
//! Autogenerated weights for `pallet_membership`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.0.0
//! DATE: 2025-01-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /Users/dastansamat/.cargo/target/release/solochain-template-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-membership
// --extrinsic=*
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output
// pallets/membership/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_membership`.
pub trait WeightInfo {
	fn create_club() -> Weight;
	fn add_member() -> Weight;
	fn transfer_club() -> Weight;
	fn set_annual_fee() -> Weight;
	fn extend_membership() -> Weight;
	fn withdraw_fees() -> Weight;
}

/// Weights for `pallet_membership` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Membership::LastClubId` (r:1 w:1)
	/// Proof: `Membership::LastClubId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Membership::Clubs` (r:0 w:1)
	/// Proof: `Membership::Clubs` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	fn create_club() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3593`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(53_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Membership::Clubs` (r:1 w:0)
	/// Proof: `Membership::Clubs` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Membership::ClubMembers` (r:0 w:1)
	/// Proof: `Membership::ClubMembers` (`max_values`: None, `max_size`: Some(203), added: 2678, mode: `MaxEncodedLen`)
	fn add_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `6196`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(56_000_000, 6196)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Membership::Clubs` (r:1 w:1)
	/// Proof: `Membership::Clubs` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	fn transfer_club() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252`
		//  Estimated: `3663`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3663)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Membership::Clubs` (r:1 w:1)
	/// Proof: `Membership::Clubs` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	fn set_annual_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252`
		//  Estimated: `3663`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3663)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Membership::Clubs` (r:1 w:0)
	/// Proof: `Membership::Clubs` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Membership::ClubMembers` (r:1 w:1)
	/// Proof: `Membership::ClubMembers` (`max_values`: None, `max_size`: Some(203), added: 2678, mode: `MaxEncodedLen`)
	fn extend_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `686`
		//  Estimated: `6196`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(62_000_000, 6196)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `3593`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(42_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Membership::LastClubId` (r:1 w:1)
	/// Proof: `Membership::LastClubId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Membership::Clubs` (r:0 w:1)
	/// Proof: `Membership::Clubs` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	fn create_club() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3593`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(53_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Membership::Clubs` (r:1 w:0)
	/// Proof: `Membership::Clubs` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Membership::ClubMembers` (r:0 w:1)
	/// Proof: `Membership::ClubMembers` (`max_values`: None, `max_size`: Some(203), added: 2678, mode: `MaxEncodedLen`)
	fn add_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `6196`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(56_000_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Membership::Clubs` (r:1 w:1)
	/// Proof: `Membership::Clubs` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	fn transfer_club() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252`
		//  Estimated: `3663`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3663)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Membership::Clubs` (r:1 w:1)
	/// Proof: `Membership::Clubs` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	fn set_annual_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252`
		//  Estimated: `3663`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3663)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Membership::Clubs` (r:1 w:0)
	/// Proof: `Membership::Clubs` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Membership::ClubMembers` (r:1 w:1)
	/// Proof: `Membership::ClubMembers` (`max_values`: None, `max_size`: Some(203), added: 2678, mode: `MaxEncodedLen`)
	fn extend_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `686`
		//  Estimated: `6196`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(62_000_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `3593`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(42_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
